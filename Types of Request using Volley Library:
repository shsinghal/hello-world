
String Request
String url = "https:// string_url/";
StringRequest
    stringRequest
    = new StringRequest(
        Request.Method.GET,
        url,
        new Response.Listener() {
            @Override
            public void onResponse(String response)
            {
            }
        },
        new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error)
            {
            }
        });
requestQueue.add(stringRequest);
</pre>
JSONObject Request
String url = "https:// json_url/";
JsonObjectRequest
    jsonObjectRequest
    = new JsonObjectRequest(
        Request.Method.GET,
        url,
        null,
        new Response.Listener() {
            @Override
            public void onResponse(JSONObject response)
            {
            }
        },
        new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error)
            {
            }
        });
requestQueue.add(jsonObjectRequest);
JSONArray Request
JsonArrayRequest
    jsonArrayRequest
    = new JsonArrayRequest(
        Request.Method.GET,
        url,
        null,
        new Response.Listener() {
            @Override
            public void onResponse(JSONArray response)
            {
            }
        },
        new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error)
            {
            }
        });
requestQueue.add(jsonArrayRequest);
Image Request
int max - width = ...;
int max_height = ...;
  
String URL = "http:// image_url.png";
  
ImageRequest
    imageRequest
    = new ImageRequest(URL,
                       new Response.Listener() {
                           @Override
                           public void
                           onResponse(Bitmap response)
                           {
                               // Assign the response
                               // to an ImageView
                               ImageView
                                   imageView
                                   = (ImageView)
                                       findViewById(
                                           R.id.imageView);
  
                               imageView.setImageBitmap(response);
                           }
                       },
                       max_width, max_height, null);
  
requestQueue.add(imageRequest);
Adding Post Parameters
String tag_json_obj = "json_obj_req";
  
String
    url
    = "https:// api.xyz.info/volley/person_object.json";
  
ProgressDialog pDialog = new ProgressDialog(this);
pDialog.setMessage("Loading...PLease wait");
pDialog.show();
  
JsonObjectRequest
    jsonObjReq
    = new JsonObjectRequest(
        Method.POST,
        url,
        null,
        new Response.Listener() {
  
            @Override
            public void onResponse(JSONObject response)
            {
                Log.d(TAG, response.toString());
                pDialog.hide();
            }
        },
        new Response.ErrorListener() {
  
            @Override
            public void onErrorResponse(VolleyError error)
            {
                VolleyLog.d(TAG, "Error: "
                                     + error.getMessage());
                pDialog.hide();
            }
        }) {
  
          @Override
          protected Map getParams()
          {
              Map params = new HashMap();
              params.put("name", "Androidhive");
              params.put("email", "abc@androidhive.info");
              params.put("password", "password123");
  
              return params;
          }
  
      };
  
AppController.getInstance()
    .addToRequestQueue(jsonObjReq, tag_json_obj);
Adding Request Headers
String tag_json_obj = "json_obj_req";
  
String
    url
    = "https:// api.androidhive.info/volley/person_object.json";
  
ProgressDialog pDialog = new ProgressDialog(this);
pDialog.setMessage("Loading...");
pDialog.show();
  
JsonObjectRequest
    jsonObjReq
    = new JsonObjectRequest(
        Method.POST,
        url,
        null,
        new Response.Listener() {
  
            @Override
            public void onResponse(JSONObject response)
            {
                Log.d(TAG, response.toString());
                pDialog.hide();
            }
        },
        new Response.ErrorListener() {
  
            @Override
            public void onErrorResponse(VolleyError error)
            {
                VolleyLog.d(TAG, "Error: "
                                     + error.getMessage());
                pDialog.hide();
            }
        }) {
  
          @Override
          public Map getHeaders() throws AuthFailureError
          {
              HashMap headers = new HashMap();
              headers.put("Content-Type", "application/json");
              headers.put("apiKey", "xxxxxxxxxxxxxxx");
              return headers;
          }
  
      };
  
AppController.getInstance()
    .addToRequestQueue(jsonObjReq, tag_json_obj);
Handling the Volley Cache
// Loading request from cache
Cache
    cache
    = AppController.getInstance()
          .getRequestQueue()
          .getCache();
  
Entry entry = cache.get(url);
if (entry != null) {
    try {
        String
            data
            = new String(entry.data, "UTF-8");
        // handle data, like converting it
        // to xml, json, bitmap etc.,
    }
    catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    }
}
}
else
{
    // If cached response doesn't exists
}
  
// Invalidate cache
AppController.getInstance()
    .getRequestQueue()
    .getCache()
    .invalidate(url, true);
  
// Turning off cache
// String request
StringRequest
    stringReq
    = new StringRequest(....);
  
// disable cache
stringReq.setShouldCache(false);
  
// Deleting cache for particular cache</strong>
AppController.getInstance()
    .getRequestQueue()
    .getCache()
    .remove(url);
  
// Deleting all the cache
AppController.getInstance()
    .getRequestQueue()
    .getCache()
    .clear(url);
Cancelling Request
// Cancel single request
String tag_json_arry = "json_req";
  
ApplicationController.getInstance()
    .getRequestQueue()
    .cancelAll("feed_request");
  
// Cancel all request
ApplicationController.getInstance()
    .getRequestQueue()
    .cancelAll();
Request Prioritization
private Priority priority = Priority.HIGH;
  
StringRequest
    strReq
    = new StringRequest(
        Method.GET,
        Const.URL_STRING_REQ,
        new Response
            .Listener() {
   
                    @Override
                    public void onResponse(String response) {
  
                        Log.d(TAG, response.toString());
                        msgResponse.setText(response.toString());
                        hideProgressDialog();
   
                    } },
        new Response
            .ErrorListener() {
   
                    @Override
                    public void 
                    onErrorResponse(VolleyError error) {
  
                        VolleyLog.d(TAG, 
                                    "Error: " 
                                        + error.getMessage());
                        hideProgressDialog();
                    } }) {
  
          @Override
          public Priority getPriority()
          {
              return priority;
          }
  
      };
